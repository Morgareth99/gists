#!/usr/bin/env python
# -*- coding: utf-8 -*-

# vim:
# sw=4:tw=4:expandtab

# 2012-2013 by Armin J. <netzverweigerer@github>

# Original version Â© 2012 Valentin Haenel <valentin.haenel@gmx.de>
# http://code.stapelberg.de/git/i3status/plain/contrib/wrapper.py
# Modifications by Armin Jenewein <netzverweigerer@gmail.com>

# This script is a simple wrapper which prefixes each i3status line with custom
# information. It is a python reimplementation of:
# http://code.stapelberg.de/git/i3status/tree/contrib/wrapper.pl

# To use it, ensure your ~/.i3status.conf contains this line:
#     output_format = "i3bar"
# in the 'general' section.
# Then, in your ~/.i3/config, use:
#     status_command i3status | path_to_this_program.py
# In the 'bar' section.

# If you want to test this program, run it like so:
# i3status | path_to_this_program.py

# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License (WTFPL), Version
# 2, as published by Sam Hocevar. See http://sam.zoy.org/wtfpl/COPYING for more
# details.

from subprocess import Popen, PIPE, STDOUT
import sys
import time

try:
    import colorsys
except ImportError:
    print('colorsys module not found. Cannot start.')
    sys.exit(1)

try:
    import json
except ImportError:
    print('json module not found. Cannot start.')
    sys.exit(1)

try:
    import psutil
except ImportError:
    print('PsUtil module not found. Cannot start.')
    sys.exit(1)


### define active / inactive colours
# active color:
ac = '#888888'
# inactive color:
ic = '#cc6666'


#####################
### Get Functions ###
#####################

def get_cpu_usage():
    return psutil.cpu_percent()

def getCpuMhz():
    with open('/proc/cpuinfo') as f:
        r = f.readlines()
        for line in r:
            if line.startswith('cpu MHz'):
                mhz = line.split(':')[1].lstrip().rstrip().split('.')[0]
                break
    return mhz

### Get CPU Governor
def get_governor():
    """ Get the current governor for cpu0, assuming all CPUs use the same. """
    with open('/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor') as fp:
        governor = fp.readlines()[0].strip()
    if governor == 'powersave':
        color = '#888888'
    elif governor == 'ondemand':
        color = '#88cc88'
    elif governor == 'performance':
        color = '#cc8888'
    else:
        color = '#888888'
    return governor, color



### Get UNIX Load
def get_load():
    cmd = 'uptime'
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read().rstrip()
    length = len(str(output, 'utf-8').split(':'))
    # try to work around the fact we sometimes get a different output format
    # (yes, this is ugly...)
    if length == 4:
        a = str(output, 'utf-8').split(':')[3]
        return a
    else:
        a = str(output, 'utf-8').split(':')[4]
        return a

### Get Memory status
def get_mem():
    with open("/proc/meminfo") as f:
        data = f.read().split('\n')
    d = {}
    # build dict
    for line in data:
        if ":" in line:
            name = line.split(':')[0]
            remain = line.split(':')[1]
            remain = remain.strip()
            d[name] = remain
    total = float(d['MemTotal'].split(' ')[0])
    free = float(d['MemFree'].split(' ')[0])
    buffers = float(d['Buffers'].split(' ')[0])
    cached = float(d['Cached'].split(' ')[0])

    # calculations
    available = free + buffers + cached
    free_percent = available / total * 100.0
    used_percent = 100.0 - free_percent

    # print(used_percent)
    return int(used_percent)


### Get PeerVPN status
def get_peervpn():
    cmd = '/sbin/ifconfig peervpn0 >/dev/null 2>&1 && echo 1 || echo 0'
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read()
    if output.rstrip() == b'1':
        return "yes"
    else:
        return "no"

### Get OpenVPN status
def get_openvpn():
    cmd = '/sbin/ifconfig openvpn0 >/dev/null 2>&1 && echo 1 || echo 0'
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read()
    if output.rstrip() == b'1':
        return "yes"
    else:
        return "no"

### Get Somea Tinc status
def get_somea():
    cmd = '/sbin/ifconfig somea >/dev/null 2>&1 && echo 1 || echo 0'
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read()
    if output.rstrip() == b'1':
        return "yes"
    else:
        return "no"


### Get Audio Mixer Volume
def get_volume():
    cmd = "amixer get Master | grep '^\ *Front Left' | cut -d\":\" -f 2- | cut -d\" \" -f 3"
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
    output = p.stdout.read()
    return str(output.rstrip(), 'utf-8')
def get_rgb_value(value):
    green_hex= "%02x" % ((100 - int(value)) * 2.55)
    red_hex = "%02x" % (int(value) * 2.55)
    result = str('#' + red_hex + green_hex + '00')
    return result
def rgb_to_html(rgb_tuple):
    hexcolor = '#%02x%02x%02x' % rgb_tuple
    return hexcolor
def map_value_to_rgb(colour):
    x = float(colour)
    y = x / 100 / 3
    a,b,c = colorsys.hsv_to_rgb(y,0.60,255)
    result = (a,b,c)
    return result


########################
### insert functions ###
########################

### insert audio volume status
def insert_volume():
#    current = get_volume()
    current = 10
    current = int(current) * 1.35
    current = int(current)
#    j.insert(8, {'full_text' : 'Volume: %s' % current, 'name' : 'vol', 'color' : get_rgb_value(current)})
    j.insert(5, {'full_text' : 'Volume: %s' % current, 'name' : 'vol'})

### Insert PeerVPN status
def insert_peervpn():
    state = get_peervpn()
    if state == "yes":
        j.insert(4, {'full_text' : 'PeerVPN CDArknet: %s' % get_peervpn(), 'name' : 'peervpn', 'color' : ac})
    if state == "no":
        j.insert(4, {'full_text' : 'PeerVPN CDArknet: %s' % get_peervpn(), 'name' : 'peervpn', 'color' : ic})

### Insert OpenVPN status
def insert_openvpn():
    state = get_openvpn()
    if state == "yes":
        j.insert(5, {'full_text' : 'krypton OpenVPN: %s' % get_openvpn(), 'name' : 'openvpn', 'color' : ac})
    if state == "no":
        j.insert(5, {'full_text' : 'krypton OpenVPN: %s' % get_openvpn(), 'name' : 'openvpn', 'color' : ic})

def insert_somea():
    state = get_somea()
    if state == "yes":
        j.insert(5, {'full_text' : 'Tinc Somea: %s' % get_somea(), 'name' : 'somea', 'color' : ac})
    if state == "no":
        j.insert(5, {'full_text' : 'Tinc Somea: %s' % get_somea(), 'name' : 'somea', 'color' : ic})


### Insert CPU status
def insert_cpu():
    state = get_cpu_usage()
    j.insert(0, {'full_text' : 'CPU: %s' % get_cpu_usage() + '%' + ' [' + getCpuMhz() + ']', 'name' : 'cpu', 'color' : '#888888'})


######################################
### main stuff and other functions ###
######################################

def print_line(message):
    """ Non-buffered printing to stdout. """
    # replace colour codes here:
    message = message.replace('#00FF00',ac)
    message = message.replace('#FF0000',ic)
    sys.stdout.write(message + '\n')
    sys.stdout.flush()

def read_line():
    """ Interrupted respecting reader for stdin. """
    # try reading a line, removing any extra whitespace
    try:
        line = sys.stdin.readline().strip()
        # i3status sends EOF, or an empty line
        if not line:
            sys.exit(3)
        return line
    # exit on ctrl-c
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    # Skip the first line which contains the version header.
    print_line(read_line())

    # The second line contains the start of the infinite array.
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        # line.replace('00FF00','002200')
##        print(line)
        # ignore comma at start of lines
        if line.startswith(','):
            line, prefix = line[1:], ','

        j = json.loads(line)
        # insert information into the start of the json, but could be anywhere
        # CHANGE THIS LINE TO INSERT SOMETHING ELSE
        governor, color = get_governor()
        j.insert(0, {'full_text' : 'Governor: %s' % governor, 'name' : 'gov', 'color' : color})
        #j.insert(5, {'full_text' : 'PeerVPN: %s' % get_peervpn(), 'name' : 'peervpn', 'color' : ac})
        # j.insert(8, {'full_text' : 'Volume: %s' % get_volume(), 'name' : 'vol', 'color' : '#8888dd'})
        insert_volume()
#        insert_peervpn()
#        insert_openvpn()
#        insert_somea()
        # j.insert(0, {'full_text' : 'Load:%s' % get_load(), 'name' : 'load', 'color' : '#bbbb00'})
        j.insert(1, {'full_text' : 'Mem: %s%%' % get_mem(), 'name' : 'mem', 'color' : '#888888'})
        # j.insert(0, {'full_text' : 'CPU: %s%%' % get_cpu_usage(), 'name' : 'cpu', 'color' : '#22dd22'})
        insert_cpu()
        # and echo back new encoded json
        print_line(prefix+json.dumps(j))



